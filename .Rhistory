else { # them
if (k==0)
out <- unlist(sapply(1:n,function(x) {
vid <- unlist(neighborhood(g,k+1,x,mode));
x.rank <- which(sort(vid)==x);
FUN(induced.subgraph(gp,vid),mode=mode)[x.rank]}))
else out <- sapply(V(g),function(x) {
FUN(induced.subgraph(gp,unlist(neighborhood(g,k,x,mode))))})
}
return(out)
}
set.seed(12345)
n <- 10^3
p <- 0.1
g <- erdos.renyi.game(n,p)
E(g)$weight = sample(ecount(g))
gp <- erdos.renyi.game(n,p)
E(gp)$weight = sample(ecount(gp))
cat("us: scan0, unweighted: ")
system.time(s1 <- degree(g))
system.time(s2 <- local.scan.jhu(g,k=0))
cat(ifelse(sum(s1-s2)==0,"passed!","failed!"),"\n")
cat("them: scan2, weighted: ")
benchmark(rep=1,
jhu={s1 <- local.scan.jhu(g,gp,k=2,weighted=T)},
igraph={s2 <- local.scan(g,gp,k=2,weighted=T)})
benchmark(replications=1, order = "user.self",
jhu={s1 <- local.scan.jhu(g,gp,k=2,weighted=T)},
igraph={s2 <- local.scan(g,gp,k=2,weighted=T)})
set.seed(12345)
n <- 10^3
p <- 0.1
g <- erdos.renyi.game(n,p)
E(g)$weight = sample(ecount(g))
gp <- erdos.renyi.game(n,p)
E(gp)$weight = sample(ecount(gp))
cat("us: scan0, unweighted: ")
benchmark(replications=1, order = "user.self",
columns = c("test", "elapsed", "relative", "user.self", "sys.self"),
jhu={s1 <- degree(g)},
igraph={s2 <- local.scan.jhu(g,k=0)})
cat(ifelse(sum(s1-s2)==0,"passed!","failed!"),"\n")
cat("us: scan0, weighted: ")
benchmark(replications=1, order = "user.self",
columns = c("test", "elapsed", "relative", "user.self", "sys.self"),
jhu={s1 <- local.scan.jhu(g,k=0,weighted=T)},
igraph={s2 <- local.scan(g,k=0,weighted=T)})
cat(ifelse(sum(s1-s2)==0,"passed!","failed!"),"\n")
cat("us: scan1, unweighted: ")
benchmark(replications=1, order = "user.self",
columns = c("test", "elapsed", "relative", "user.self", "sys.self"),
jhu={s1 <- local.scan(g)},
igraph={s2 <- local.scan.jhu(g,k=1)})
cat(ifelse(sum(s1-s2)==0,"passed!","failed!"),"\n")
benchmark(replications=1, order = "user.self",
columns = c("test", "elapsed", "relative", "user.self", "sys.self"),
jhu={s1 <- local.scan.jhu(g,k=0,weighted=T)},
igraph={s2 <- local.scan(g,k=0,weighted=T)})
cat(ifelse(sum(s1-s2)==0,"passed!","failed!"),"\n")
set.seed(12345)
n <- 10^3
p <- 0.1
g <- erdos.renyi.game(n,p)
E(g)$weight = sample(ecount(g))
gp <- erdos.renyi.game(n,p)
E(gp)$weight = sample(ecount(gp))
benchmark(replications=1, order = "user.self",
columns = c("test", "elapsed", "relative", "user.self", "sys.self"),
jhu={s1 <- degree(g)},
igraph={s2 <- local.scan.jhu(g,k=0)})
cat(ifelse(sum(s1-s2)==0,"passed!","failed!"),"\n")
benchmark(replications=1, order = "user.self",
columns = c("test", "elapsed", "relative", "user.self", "sys.self"),
jhu={s1 <- local.scan.jhu(g,k=0,weighted=T)},
igraph={s2 <- local.scan(g,k=0,weighted=T)})
cat(ifelse(sum(s1-s2)==0,"passed!","failed!"),"\n")
benchmark(replications=1, order = "user.self",
columns = c("test", "elapsed", "relative", "user.self", "sys.self"),
jhu={s1 <- local.scan(g)},
igraph={s2 <- local.scan.jhu(g,k=1)})
cat(ifelse(sum(s1-s2)==0,"passed!","failed!"),"\n")
benchmark(replications=1, order = "user.self",
columns = c("test", "elapsed", "relative", "user.self", "sys.self"),
jhu={s1 <- local.scan.jhu(g,k=1,weighted=T)},
igraph={s2 <- local.scan(g,k=1,weighted=T)})
cat(ifelse(sum(s1-s2)==0,"passed!","failed!"),"\n")
benchmark(replications=1, order = "user.self",
columns = c("test", "elapsed", "relative", "user.self", "sys.self"),
jhu={s1 <- local.scan.jhu(g,k=2)},
igraph={s2 <- local.scan(g,k=2)})
cat(ifelse(sum(s1-s2)==0,"passed!","failed!"),"\n")
benchmark(replications=1, order = "user.self",
columns = c("test", "elapsed", "relative", "user.self", "sys.self"),
jhu={s1 <- local.scan.jhu(g,k=2,weighted=T)},
igraph={s2 <- local.scan(g,k=2,weighted=T)})
cat(ifelse(sum(s1-s2)==0,"passed!","failed!"),"\n")
library(igraph)
library(rbenchmark)
sessionInfo()
local.scan.jhu <- function(g,gp=NULL,k=1,mode="out",FUN=ecount,weighted=FALSE)
{
wstat <- function(g,...) {
A <- get.adjacency(g,attr="weight")
if (k==0) { # weighted degree
indeg <- colSums(A)
outdeg <- rowSums(A)
if (mode=="in") out <- indeg
else if (mode=="out") out <- outdeg
else out <- indeg + outdeg
} else { # weighted ecount
out <- sum(A)
if (mode=="in" | mode=="out") out <- out/2
}
return(out)
}
if(k<0) stop("Error: k should be a non-negative integer!\n")
if(k==0) FUN <- degree
if(weighted) FUN <- wstat
require(igraph)
if (is.matrix(g) | is.matrix(gp)) {
gmode <- ifelse((mode=="out" | mode=="in"),"directed","undirected")
g <- simplify(graph.adjacency(g,mode=gmode))
if (!is.null(gp))
gp <- simplify(graph.adjacency(gp,mode=gmode))
}
n <- vcount(g)
if (is.null(gp)) {
if (k==0) out <- FUN(g,mode=mode)
else out <- sapply(graph.neighborhood(g,k,V(g),mode),FUN)
}
else { # them
if (k==0)
out <- unlist(sapply(1:n,function(x) {
vid <- unlist(neighborhood(g,k+1,x,mode));
x.rank <- which(sort(vid)==x);
FUN(induced.subgraph(gp,vid),mode=mode)[x.rank]}))
else out <- sapply(V(g),function(x) {
FUN(induced.subgraph(gp,unlist(neighborhood(g,k,x,mode))))})
}
return(out)
}
set.seed(123)
n <- 10^3
p <- 0.1
g <- erdos.renyi.game(n,p)
E(g)$weight = sample(ecount(g))
gp <- erdos.renyi.game(n,p)
E(gp)$weight = sample(ecount(gp))
benchmark(replications=1, order = "user.self",
columns = c("test", "elapsed", "relative", "user.self", "sys.self"),
jhu={s1 <- degree(g)},
igraph={s2 <- local.scan.jhu(g,k=0)})
cat(ifelse(sum(s1-s2)==0,"passed!","failed!"),"\n")
benchmark(replications=1, order = "user.self",
columns = c("test", "elapsed", "relative", "user.self", "sys.self"),
jhu={s1 <- local.scan.jhu(g,k=0,weighted=T)},
igraph={s2 <- local.scan(g,k=0,weighted=T)})
cat(ifelse(sum(s1-s2)==0,"passed!","failed!"),"\n")
local.scan.jhu(g,k=0,weighted=T)
A = g[]
max(A)
dim(A)
indeg = colSums(A)
str(A)
local.scan.jhu <- function(g,gp=NULL,k=1,mode="out",FUN=ecount,weighted=FALSE)
{
wstat <- function(g,...) {
A <- as.matrix(get.adjacency(g,attr="weight"))
if (k==0) { # weighted degree
indeg <- colSums(A)
outdeg <- rowSums(A)
if (mode=="in") out <- indeg
else if (mode=="out") out <- outdeg
else out <- indeg + outdeg
} else { # weighted ecount
out <- sum(A)
if (mode=="in" | mode=="out") out <- out/2
}
return(out)
}
if(k<0) stop("Error: k should be a non-negative integer!\n")
if(k==0) FUN <- degree
if(weighted) FUN <- wstat
require(igraph)
if (is.matrix(g) | is.matrix(gp)) {
gmode <- ifelse((mode=="out" | mode=="in"),"directed","undirected")
g <- simplify(graph.adjacency(g,mode=gmode))
if (!is.null(gp))
gp <- simplify(graph.adjacency(gp,mode=gmode))
}
n <- vcount(g)
if (is.null(gp)) {
if (k==0) out <- FUN(g,mode=mode)
else out <- sapply(graph.neighborhood(g,k,V(g),mode),FUN)
}
else { # them
if (k==0)
out <- unlist(sapply(1:n,function(x) {
vid <- unlist(neighborhood(g,k+1,x,mode));
x.rank <- which(sort(vid)==x);
FUN(induced.subgraph(gp,vid),mode=mode)[x.rank]}))
else out <- sapply(V(g),function(x) {
FUN(induced.subgraph(gp,unlist(neighborhood(g,k,x,mode))))})
}
return(out)
}
indeg = colSums(A)
str(A)
A = g[]
A = as.matrix(get.adjacency(g))
str(A)
indeg = colSums(A)
library(igraph)
library(microbenchmark)
us <- microbenchmark(times=1,
jhu.scan0.unweighted={local.scan.jhu(g,k=0,weighted=F)},
jhu.scan1.unweighted={local.scan.jhu(g,k=1,weighted=F)},
jhu.scan2.unweighted={local.scan.jhu(g,k=2,weighted=F)},
jhu.scan0.weighted={local.scan.jhu(g,k=0,weighted=T)},
jhu.scan1.weighted={local.scan.jhu(g,k=1,weighted=T)},
jhu.scan2.weighted={local.scan.jhu(g,k=2,weighted=T)},
igraph.scan0.unweighted={local.scan(g,k=0,weighted=F)},
igraph.scan1.unweighted={local.scan(g,k=1,weighted=F)},
igraph.scan2.unweighted={local.scan(g,k=2,weighted=F)},
igraph.scan0.weighted={local.scan(g,k=0,weighted=F)},
igraph.scan1.weighted={local.scan(g,k=1,weighted=F)},
igraph.scan2.weighted={local.scan(g,k=2,weighted=F)})
str(us)
print(us)
us <- microbenchmark(times=1, unit="milisecond"
jhu.scan0.unweighted={local.scan.jhu(g,k=0,weighted=F)},
jhu.scan1.unweighted={local.scan.jhu(g,k=1,weighted=F)},
jhu.scan2.unweighted={local.scan.jhu(g,k=2,weighted=F)},
jhu.scan0.weighted={local.scan.jhu(g,k=0,weighted=T)},
jhu.scan1.weighted={local.scan.jhu(g,k=1,weighted=T)},
jhu.scan2.weighted={local.scan.jhu(g,k=2,weighted=T)},
igraph.scan0.unweighted={local.scan(g,k=0,weighted=F)},
igraph.scan1.unweighted={local.scan(g,k=1,weighted=F)},
igraph.scan2.unweighted={local.scan(g,k=2,weighted=F)},
igraph.scan0.weighted={local.scan(g,k=0,weighted=F)},
igraph.scan1.weighted={local.scan(g,k=1,weighted=F)},
igraph.scan2.weighted={local.scan(g,k=2,weighted=F)})
boxplot(us)
us <- microbenchmark(times=3, unit="milisecond",
jhu.scan0.unweighted={local.scan.jhu(g,k=0,weighted=F)},
jhu.scan1.unweighted={local.scan.jhu(g,k=1,weighted=F)},
jhu.scan2.unweighted={local.scan.jhu(g,k=2,weighted=F)},
jhu.scan0.weighted={local.scan.jhu(g,k=0,weighted=T)},
jhu.scan1.weighted={local.scan.jhu(g,k=1,weighted=T)},
jhu.scan2.weighted={local.scan.jhu(g,k=2,weighted=T)},
igraph.scan0.unweighted={local.scan(g,k=0,weighted=F)},
igraph.scan1.unweighted={local.scan(g,k=1,weighted=F)},
igraph.scan2.unweighted={local.scan(g,k=2,weighted=F)},
igraph.scan0.weighted={local.scan(g,k=0,weighted=F)},
igraph.scan1.weighted={local.scan(g,k=1,weighted=F)},
igraph.scan2.weighted={local.scan(g,k=2,weighted=F)})
print(us)
us
us <- microbenchmark(times=3, unit="second",
jhu.scan0.unweighted={local.scan.jhu(g,k=0,weighted=F)},
jhu.scan1.unweighted={local.scan.jhu(g,k=1,weighted=F)},
jhu.scan2.unweighted={local.scan.jhu(g,k=2,weighted=F)},
jhu.scan0.weighted={local.scan.jhu(g,k=0,weighted=T)},
jhu.scan1.weighted={local.scan.jhu(g,k=1,weighted=T)},
jhu.scan2.weighted={local.scan.jhu(g,k=2,weighted=T)},
igraph.scan0.unweighted={local.scan(g,k=0,weighted=F)},
igraph.scan1.unweighted={local.scan(g,k=1,weighted=F)},
igraph.scan2.unweighted={local.scan(g,k=2,weighted=F)},
igraph.scan0.weighted={local.scan(g,k=0,weighted=F)},
igraph.scan1.weighted={local.scan(g,k=1,weighted=F)},
igraph.scan2.weighted={local.scan(g,k=2,weighted=F)})
us
print(us)
us <- microbenchmark(times=3, unit="ms",
jhu.scan0.unweighted={local.scan.jhu(g,k=0,weighted=F)},
jhu.scan1.unweighted={local.scan.jhu(g,k=1,weighted=F)},
jhu.scan2.unweighted={local.scan.jhu(g,k=2,weighted=F)},
jhu.scan0.weighted={local.scan.jhu(g,k=0,weighted=T)},
jhu.scan1.weighted={local.scan.jhu(g,k=1,weighted=T)},
jhu.scan2.weighted={local.scan.jhu(g,k=2,weighted=T)},
igraph.scan0.unweighted={local.scan(g,k=0,weighted=F)},
igraph.scan1.unweighted={local.scan(g,k=1,weighted=F)},
igraph.scan2.unweighted={local.scan(g,k=2,weighted=F)},
igraph.scan0.weighted={local.scan(g,k=0,weighted=F)},
igraph.scan1.weighted={local.scan(g,k=1,weighted=F)},
igraph.scan2.weighted={local.scan(g,k=2,weighted=F)})
print(us)
boxplot(us)
require(ggplot2)
qplot(y=time, data=out, colour=expr) + scale_y_log10()
qplot(y=time, data=us, colour=expr) + scale_y_log10()
qplot(y=time, data=out, colour=expr)
qplot(y=time, data=us, colour=expr)
print(us)
boxplot(us)
str(us)
head(us)
dim(us)
us
library(Matrix)
set.seed(12345)
n = 10^3
m = 10^2
KA = n/m
KH = 5
rho = c(0.0200 , 0.5000 , 0.1500 , 0.0800 , 0.2500)
C = matrix( c(
0.1000 , 0.0700 , 0.0000 , 0.0100 , 0.0000 ,
0.0200 , 0.0500 , 0.0300 , 0.0200 , 0.0400 ,
0.0300 , 0.0400 , 0.0800 , 0.0800 , 0.0600 ,
0.3700 , 0.2600 , 0.1300 , 0.2900 , 0.2000 ,
0.0000 , 0.0200 , 0.0200 , 0.0600 , 0.0900 )
,ncol=KH,byrow=T)
C=(C+t(C))/2
C
p=0.01
A = matrix(rbinom(n^2,1,p),nrow=n,ncol=n)
ilist = NULL ;
for(i in 1:KH) ilist = append(ilist,rep(i,m*rho[i]))
for(i in 0:(KA-1))
{
H = matrix(0,nrow=m,ncol=m)
for(i1 in 1:m)
for(i2 in 1:m)
H[i1,i2] = rbinom(1,1,C[ilist[i1],ilist[i2]])
A[((m*i)+1):((m*i)+m),((m*i)+1):((m*i)+m)] = H
}
A = A*upper.tri(A)
A = A+t(A)
diag(A)=0
A <- A + Diagonal(x=apply(A,1,sum))/(nrow(A)-1) # diagonal augmentation
sum(diag(A))
require(knitr)
render_listings()
htmlFile <- tempfile(fileext=".html")
rstudio::viewer(htmlFile)
rstudio::viewer("http://localhost:8100")
viewer <- getOption("viewer")
viewer
is.null(viewer)
viewer("http://localhost:8100")
require(shiny)
runApp("MyAppDir", launch.browser = rstudio::viewer)
runExample("01_hello")
options(markdown.HTML.stylesheet="~/RFolder/pandoc.css");
require(knitr)
require(markdown)
markdownHTMLOptions()
options(markdown.HTML.options = markdownHTMLOptions())
options(markdown.HTML.stylesheet="~/RFolder/pandoc.css");
require(igraph)
require(mclust)
n <- 100
K <- 2
m <- n/K # 500
mvec <- rep(m,K)
cvec <- seq(0,0.5,by=0.1)
R <- length(cvec) # 6
set.seed(12345)
B <- lapply(1:R, function(x) (.5-cvec[x])*matrix(1,K,K)+(2*cvec[x])*diag(K))
g <- lapply(1:R, function(x) sbm.game(n,B[[x]],mvec))
require(igraph)
require(Matrix)
require(lattice)
mycol <- heat.colors(10)
fname <- "drosophila_retina_1.graphml"
g <- read.graph(fname, format="graphml")
setwd("~/Dropbox/Mitya")
g <- read.graph(fname, format="graphml")
g <- simplify(g) # unweighted & hollow
g <- as.undirected(g);
g
is.connected(g)
no.clusters(g,"weak")
set.seed(12345)
load("layout-kamada.kawai.Rbin")
A <- g[]
image(A,lwd=0.5,main="A")
wc <- multilevel.community(g)
mdL<- modularity(wc)
membL <- membership(wc)
wcW <- walktrap.community(g)
membW <- membership(wcW)
wcI <- infomap.community(g)
membI <- membership(wcI)
wcF <- fastgreedy.community(g)
membF <- membership(wcF)
plotmemb(A,membL,main=paste("Louvain, Rhat = ", max(membL)),drawborder=TRUE)
source("~/RFolder/plotcolordist.R")
plotmemb(A,membL,main=paste("Louvain, Rhat = ", max(membL)),drawborder=TRUE)
plotmemb(A,membW,main=paste("Walktrap, Rhat = ", max(membW)),drawborder=TRUE)
plotmemb(A,membI,main=paste("Infomap, Rhat = ", max(membI)),drawborder=TRUE)
plotmemb(A,membF,main=paste("Fastgreedy, Rhat = ", max(membF)),drawborder=TRUE)
load("sgm.Rbin")
plotmemb(Ahatpad, cl=cl2, drawborder=TRUE)
plotmemb(bdiag(Ahatpad), cl=cl2, drawborder=TRUE)
plotmemb(bdiag(Ahatpad), cl=cl2, drawborder=TRUE, main="Ahatpad")
minF <- 10; maxF <- 400
pad <- zeroPadding(A,membp,minF,maxF)
source("~/RFolder/mitya.r")
setwd("~/Dropbox/Mitya")
source("~/RFolder/Mitya/mitya.r")
source("~/Dropbox/Mitya/mitya.r")
minF <- 10; maxF <- 400
pad <- zeroPadding(A,membp,minF,maxF)
load("sgmout-Ahatsgm-Alistmin-stat-obs.Rbin")
(Tobs <- sgmout$stat)
ls()
S
g
plot(g,layout.auto,vertex.size=3,vertex.label=NA)
plot(g,layout=layout.auto(g),vertex.size=3,vertex.label=NA)
X11())
X11()
plot(g,layout=layout.auto(g),vertex.size=3,vertex.label=NA)
mycol3
mycol3 <- rainbow(Rhat)
Rhat
V(g)$color <- mycol3(Rhat)
V(g)$color <- mycol3[Rhat]
lo <- layout.drl(g,options=list(simmer.attraction=0))
plot(g,layout=lo,vertex.size=3,vertex.label=NA)
mycol3
Rhat
table(V(g)$color)
V(g)$color <- mycol3[membp]
plot(g,layout=lo,vertex.size=3,vertex.label=NA)
Rhat
Ahat
str(Ahat)
length(Ahat)
i
X11())
X11()
image(bdiag(Ahat))
image(bdiag(Ahat))
set.seed(12345))
set.seed(12345)
xx <- matrix(sample(c(0,1),16),4,4)
xx <- matrix(sample(c(0,1),16,rep=TRUE),4,4)
set.seed(12345)
xx <- matrix(sample(c(0,1),16,rep=TRUE),4,4)
yy <- matrix(sample(c(0,1),16,rep=TRUE),4,4)
xx
yy
diag(xx) <- diag(yy) <- 0
xx
yy
source("~/RFolder/makeS.R")
makeS(bdiag(list(xx,yy)))
makeS(list(xx,yy))
require(clue)
makeS(list(xx,yy))
xx
yy
Rhat
row(xx)
col(xx)
zz <- matrix(1:16,4,4)
zz
zz[row(zz) != col(zz)]
image(bdiag(Ahat),lwd=.5)
        source("~/RFolder/gclust.R")
         gout1 = foreach(itr=1:Rhat,.combine='rbind') %dopar% {
             getAICc(gclust(Ahat,itr,maxit=1000))
         }
        gout1
        (khat <- which.min(unlist(gout1[,4])))
        source("~/RFolder/gclust.R")
             getAICc(gclust(Ahat,10,maxit=1000))
        gout1
gout <- gclust(Ahat,10,maxit=1000)
matplot(t(gout$H),type="b")
save(Ahat, file="Ahat-sim-10.Rbin")
plot(svd(gout$W)$d))
plot(svd(gout$W)$d)
dimSelect(svd(gout$W)$d)
is.vector(xx)
is.matrix(xx)
is.vector(1:4)
q())
q()
n
generateFigures()
source("behaviotypes.R")
source("behaviotypes.R")
source("behaviotypes.R")
source("behaviotypes.R")
source("behaviotypes.R")
X11()
soure("behaviotypes.R")
source("behaviotypes.R")
source("behaviotypes.R")
rm(list=ls())
source("behaviotypes.R")
source("behaviotypes.R")
makeSuppS6AB()
getwd()
rm(list=ls())
source("behaviotypes.R")
